# vim:fileencoding=utf-8:foldmethod=marker

# Hack Nerd Font
font_family      Fira Code
bold_font        auto
italic_font      auto
bold_italic_font auto

# Font size in pt
font_size 10.0

# when to disableligatures. Currently only under the cursor.
disable_ligatures cursor

# Force Cursor Colour to be Neon Pink
cursor #FF10F0

# Set cursor blink interval to system default
cursor_blink_interval -1

#Never stop blinking
cursor_stop_blinking_after 0

# Number of lines of history to keep in memory for scrolling back.
scrollback_lines 2000

# Disable mouse hiding, buggy on macOS
mouse_hide_wait 0

# url_color #0087bd
url_style curly

# The program to open clicked URLs.
open_url_with default

# Detect URLs under the mouse.
detect_urls yes

# When the mouse hovers over a terminal hyperlink, show the actual
# URL that will be activated when the hyperlink is clicked.
show_hyperlink_targets yes

# Copy to clipboard or a private buffer on select. With this set to
# clipboard, selecting text with the mouse will cause the text to be
# copied to clipboard.
# Note that copying to the clipboard is a security risk, as all
# programs, including websites open in your browser can read the
# contents of the system clipboard.
copy_on_select no

# A comma separated list of actions to take when pasting text into
# the terminal. The supported paste actions are:
# quote-urls-at-prompt:
#     If the text being pasted is a URL and the cursor is at a shell prompt,
#     automatically quote the URL (needs shell_integration).
# confirm:
#     Confirm the paste if bracketed paste mode is not active or there is
#     a large amount of text being pasted.
# filter:
#     Run the filter_paste() function from the file paste-actions.py in
#     the kitty config directory on the pasted text. The text returned by the
#     function will be actually pasted.
paste_actions quote-urls-at-prompt

# Remove spaces at the end of lines when copying to clipboard. A
# value of smart will do it when using normal selections, but not
# rectangle selections. A value of always will always do it.
strip_trailing_spaces smart

# Characters considered part of a word when double clicking. 
# Removed "_" and "-" form this list for easy snake case
select_by_word_characters @./~?&=%+#

# Set the active window to the window under the mouse when moving the
# mouse around.
focus_follows_mouse yes

# Delay between screen updates (in milliseconds). Decreasing it,
# increases frames-per-second (FPS) at the cost of more CPU usage.
# The default value yields ~100 FPS which is more than sufficient for
# most uses. Note that to actually achieve 100 FPS, you have to
# either set sync_to_monitor to no or use a monitor with a high
# refresh rate. Also, to minimize latency when there is pending input
# to be processed, this option is ignored.
repaint_delay 10

# Delay before input from the program running in the terminal is
# processed (in milliseconds). Note that decreasing it will increase
# responsiveness, but also increase CPU usage and might cause flicker
# in full screen programs that redraw the entire screen on each loop,
# because kitty is so fast that partial screen updates will be drawn.
input_delay 3

# Sync screen updates to the refresh rate of the monitor. This
# prevents screen tearing
# <https://en.wikipedia.org/wiki/Screen_tearing> when scrolling.
# However, it limits the rendering speed to the refresh rate of your
# monitor. With a very high speed mouse/high keyboard repeat rate,
# you may notice some slight input latency. If so, set this to no.
sync_to_monitor yes

# The audio bell. Useful to disable it in environments that require
# silence.
enable_audio_bell no

# The visual bell duration (in seconds). Flash the screen when a bell
# occurs for the specified number of seconds. Set to zero to disable.
# visual_bell_color none

# The color used by visual bell. Set to none will fall back to
# selection background color. If you feel that the visual bell is too
# bright, you can set it to a darker color.
visual_bell_duration 0.0

# Request window attention on bell. Makes the dock icon bounce on
# macOS or the taskbar flash on linux.
window_alert_on_bell yes

# Some text or a Unicode symbol to show on the tab if a window in the
# tab that does not have focus has a bell. If you want to use leading
# or trailing spaces, surround the text with quotes. See
# tab_title_template for how this is rendered.
# For backwards compatibility, values of yes, y and true are
# converted to the default bell symbol and no, n, false and none are
# converted to the empty string.
bell_on_tab "üîî "

# Program to run when a bell occurs. The environment variable
# KITTY_CHILD_CMDLINE can be used to get the program running in the
# window in which the bell occurred.
command_on_bell none

# Path to a sound file to play as the bell sound. If set to none, the
# system default bell sound is used. Must be in a format supported by
# the operating systems sound API, such as WAV or OGA on Linux
# (libcanberra) or AIFF, MP3 or WAV on macOS (NSSound)
bell_path none

# If enabled, the OS Window size will be remembered so that new
# instances of kitty will have the same size as the previous
# instance. If disabled, the OS Window will initially have size
# configured by initial_window_width/height, in pixels. You can use a
# suffix of "c" on the width/height values to have them interpreted
# as number of cells instead of pixels.
remember_window_size  yes
initial_window_width  640
initial_window_height 400

# The step size (in units of cell width/cell height) to use when
# resizing kitty windows in a layout with the shortcut
# start_resizing_window.
window_resize_step_cells 2
window_resize_step_lines 2

# The width of window borders. Can be either in pixels (px) or pts
# (pt). Values in pts will be rounded to the nearest number of pixels
# based on screen resolution. If not specified, the unit is assumed
# to be pts. Note that borders are displayed only when more than one
# window is visible. They are meant to separate multiple windows.
window_border_width 0.5pt

# Draw only the minimum borders needed. This means that only the
# borders that separate the window from a neighbor are drawn. Note
# that setting a non-zero window_margin_width overrides this and
# causes all borders to be drawn.
draw_minimal_borders no

# The window margin (in pts) (blank area outside the border).
window_margin_width 0

# The window margin to use when only a single window is visible (in
# pts). Negative values will cause the value of window_margin_width
# to be used instead. 
single_window_margin_width -1

# The window padding (in pts) (blank area between the text and the
# window border)
window_padding_width 0

# When the window size is not an exact multiple of the cell size, the
# cell area of the terminal window will have some extra padding on
# the sides. You can control how that padding is distributed with
# this option.
placement_strategy center

# The color for the border of the active window. Set this to none to
# not draw borders around the active window.
active_border_color #00ff00

# The color for the border of inactive windows.
inactive_border_color #cccccc

# Hide the window decorations (title-bar and window borders) with
# yes. On macOS, titlebar-only and titlebar-and-corners can be used
# to only hide the titlebar and the rounded corners. Whether this
# works and exactly what effect it has depends on the window
# manager/operating system. 
hide_window_decorations no

# Path to a logo image. Must be in PNG format. Relative paths are
# interpreted relative to the kitty config directory. 
window_logo_path none

# Where to position the window logo in the window. 
window_logo_position bottom-right

# Position of tab bar
tab_bar_edge top

# The edge to show the tab bar on, top or bottom.
tab_bar_margin_width 0.0

# The margin to the left and right of the tab bar (in pts).
tab_bar_margin_height 0.0 0.0

# The margin above and below the tab bar (in pts). The first number
# is the margin between the edge of the OS Window and the tab bar.
# The second number is the margin between the tab bar and the
# contents of the current tab.

# The tab bar style, can be one of:
# fade
#     Each tab's edges fade into the background color. (See also tab_fade)
# slant
#     Tabs look like the tabs in a physical file.
# separator
#     Tabs are separated by a configurable separator. (See also
#     tab_separator)
# powerline
#     Tabs are shown as a continuous line with "fancy" separators.
#     (See also tab_powerline_style)
# custom
#     A user-supplied Python function called draw_tab is loaded from the file
#     tab_bar.py in the kitty config directory. For examples of how to
#     write such a function, see the functions named draw_tab_with_* in
#     kitty's source code: kitty/tab_bar.py. See also
#     this discussion <https://github.com/kovidgoyal/kitty/discussions/4447>
#     for examples from kitty users.
# hidden
#     The tab bar is hidden. If you use this, you might want to create
#     a mapping for the select_tab action which presents you with a list of
#     tabs and allows for easy switching to a tab.
tab_bar_style fade 

# Some text or a Unicode symbol to show on the tab if a window in the
# tab that does not have focus has some activity. If you want to use
# leading or trailing spaces, surround the text with quotes. See
# tab_title_template for how this is rendered.
tab_activity_symbol "‚ùó "

# Template to use for active tabs. 
# active_tab_foreground   #000
# active_tab_background   #eee
active_tab_font_style   bold-italic
# inactive_tab_foreground #444
# inactive_tab_background #999
inactive_tab_font_style normal

# The opacity of the background. This will only work if supported by 
# the OS (for instance, when using a compositor under X11).
background_opacity 0.90

# Set to a positive value to enable background blur. Only takes effect 
# when background_opacity is less than one. Setting it to too high a 
# value will cause severe performance issues and/or rendering artifacts. 
# Usually, values up to 64 work well. Currently supported on macOS and 
# KDE/X11.
background_blur 25

# The terminal based text editor to use when
# editing the kitty config file or similar tasks.
editor /opt/homebrew/bin/nvim

# The interval to periodically check if an update to kitty is
# available (in hours). If an update is found, a system notification
# is displayed informing you of the available update. 
# Set to zero to disable.
update_check_interval 0

# The maximum size (in MB) of data from programs running in kitty
# that will be stored for writing to the system clipboard. A value of
# zero means no size limit is applied. See also clipboard_control.
clipboard_max_size 512

# Process hyperlink escape sequences (OSC 8). If disabled OSC 8
# escape sequences are ignored. Otherwise they become clickable
# links, that you can click with the mouse or by using the hints
# kitten <https://sw.kovidgoyal.net/kitty/kittens/hints/>. 
allow_hyperlinks yes

# Enable shell integration on supported shells. This enables features
# such as jumping to previous prompts, browsing the output of the
# previous command in a pager, etc. on supported shells. See Shell 
# integration <https://sw.kovidgoyal.net/kitty/shell-integration/>
shell_integration enabled

# Control whether programs running in the terminal can request new
# windows to be created. The canonical example is clone-in-kitty
# <https://sw.kovidgoyal.net/kitty/shell-integration/#clone-shell>.
# Allowing cloning unconditionally gives programs running in the
# terminal (including over SSH) permission to execute arbitrary code,
# as the user who is running the terminal, on the computer that the
# terminal is running on.
allow_cloning ask

# Control what shell code is sourced when running clone-in-kitty in
# the newly cloned window. The supported strategies are:
# venv
#     Source the file $VIRTUAL_ENV/bin/activate. This is used by the
#     Python stdlib venv module and allows cloning venvs automatically.
# conda
#     Run conda activate $CONDA_DEFAULT_ENV. This supports the virtual
#     environments created by conda.
# env_var
#     Execute the contents of the environment variable
#     KITTY_CLONE_SOURCE_CODE with eval.
# path
#     Source the file pointed to by the environment variable
#     KITTY_CLONE_SOURCE_PATH.
# This option must be a comma separated list of the above values.
# This only source the first valid one in the above order.
clone_source_strategies venv,conda,env_var,path

# The value of the TERM environment variable to set. Changing this
# can break many terminal programs, only change it if you know what
# you are doing!!! The TERM variable is used by various programs to 
# get information about the capabilities and behavior of the terminal. 
term xterm-kitty

# Use the Option key as an Alt key on macOS. With this set to no,
# kitty will use the macOS native Option+Key to enter Unicode
# character behavior. This will break any Alt+Key keyboard shortcuts
# in your terminal programs, but you can use the macOS Unicode input
# technique. You can use the values: left, right or both to use only
# the left, right or both Option keys as Alt, instead.
macos_option_as_alt left 

# Hide the kitty window from running tasks on macOS (‚åò+Tab and the
# Dock). 
macos_hide_from_tasks no

# Have kitty quit when all the top-level windows are closed on macOS.
# By default, kitty will stay running, even with no open windows, as
# is the expected behavior on macOS.
macos_quit_when_last_window_closed yes 

# Disable this if you want kitty top-level OS windows to not be
# resizable on macOS.
macos_window_resizable yes

# Draw an extra border around the font with the given width, to
# increase legibility at small font sizes on macOS.
macos_thicken_font 0

# Use the macOS traditional full-screen transition, that is faster,
# but less pretty. "yes" seems to break with yabai
macos_traditional_fullscreen no 

# Control where the window title is displayed on macOS. A value of 
# all will show the title in both places, and none hides the title.
macos_show_window_title_in all

# Hide macOS kitty application
map cmd+h hide_macos_app

# Minimize macOS window
map cmd+m minimize_macos_window

# Quit kitty
map cmd+q quit

# Catppuccin-Mocha
include current-theme.conf
